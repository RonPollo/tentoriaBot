from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from workTable import Table
from copy import deepcopy
import json
from datetime import datetime
from text import get_report
import dotenv


from states import Car, Admin


TOKEN = "5938228666:AAFge70Oj-GaBhFMQnPzyu3nzQ1y6McHXeQ"
GOOGLE_CREDENTIALS_FILE = 'tablesApi.json'
# ADMIN_ID=1358843066
ADMIN_ID=439430606
ADMIN_ID1=1


bot = Bot(token=TOKEN)
storage = MemoryStorage() 
dp = Dispatcher(bot=bot, storage=storage)



@dp.message_handler(commands=['start'], state="*")
async def start_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    user_full_name = message.from_user.full_name

    with open('text.txt', 'a') as f:
        f.write(f"{user_id}\t{user_name}\t@{message.from_user.username}\n")
    
    f = open ('names.json', "r")
    data = json.loads(f.read())
    f.close()

    id = data.get(str(message.chat.id), None)



    if message.from_user.id == ADMIN_ID or message.from_user.id == ADMIN_ID1:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É")
        item2 = types.KeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É")
        
        markup.add(item1)
        markup.add(item2)

        await bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", reply_markup=markup)
        await Admin.admin.set()
        return 

    if id:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        report = types.KeyboardButton(text="–û—Ç—á–µ—Ç")
        markup.add(report)

        async with state.proxy() as data:
            data['sheet_name'] = id

        await Car.report.set() # change to car.report
        await message.reply(f"üíº–ü—Ä–∏–≤–µ—Ç, {user_full_name}!", reply_markup=markup)
    else:
        await Car.surname.set()
        await message.reply(f"üíº–ü—Ä–∏–≤–µ—Ç, {user_full_name}!, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –§–∞–º–∏–ª–∏—é")


@dp.message_handler(state=Admin.admin)
async def admin_message_handler(message, state: FSMContext):
    if message.text ==  "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É":
        create_new_table()
        await bot.send_message(message.chat.id, "–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
    elif message.text == "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É":
        f = open ('names.json', "r")
        data = json.loads(f.read())
        f.close()
        spreadsheetUrl = data.get('spreadsheetUrl', None)
        
        await bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É{spreadsheetUrl}")
    else: 
        await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é ")

    


def create_new_table():
    tb = Table(GOOGLE_CREDENTIALS_FILE)
    time = datetime.now()
    tb.ss.create(f"{time.year}/{time.month}", f"{time.day}")
    tb.ss.shareWithAnybodyForWriting()
    tb.ss.sheetId
    tb.create_struct_for_sheet()
    with open('names.json', 'r+') as f:
        data = json.load(f)
        data['spreadsheetUrl'] = tb.ss.getSheetURL()
        data['id'] = tb.ss.sheetId
        f.seek(0)
        json.dump(data, f, indent=4)
        f.truncate()

    del tb


@dp.message_handler(state=Car.surname)
async def handle(message, state: FSMContext):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    report = types.KeyboardButton(text="–û—Ç—á–µ—Ç")
    markup.add(report)


    async with state.proxy() as data:
        data['sheet_name'] = message.text

    with open('names.json', 'r+') as f:
            data = json.load(f)
            data[message.chat.id] = message.text
            f.seek(0)
            json.dump(data, f, indent=4)
            f.truncate()

    await Car.report.set()
    await bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç—á–µ—Ç", reply_markup=markup)


@dp.message_handler(state=Car.report)
async def handle(message, state: FSMContext):

    if message.text.lower() == "–æ—Ç—á–µ—Ç":
        await Car.number.set()
        await bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã")
    else:
        #state = 3
        pass



@dp.message_handler(state=Car.number)
async def handle(message, state: FSMContext):

    try: 
        int(message.text)

        async with state.proxy() as data:
            data['number_car'] = int(message.text)

        await Car.date.set()
        await bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥")
    except:
        await bot.send_message(message.chat.id, "–≠—Ç–æ –Ω–µ –Ω–æ–º–µ—Ä")


@dp.message_handler(state=Car.date)
async def handle(message, state: FSMContext):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    day = types.KeyboardButton(text="üåû–î–µ–Ω—å")
    night = types.KeyboardButton(text="üåö–ù–æ—á—å")
    markup.add(day, night)

    try:
        date_list = message.text.split(".")
        if len(date_list) == 3:

 
            for num in date_list:

                if len(num) != 2:
                    raise Exception()
                else:
                    async with state.proxy() as data:
                        data['date'] = message.text

            await Car.period.set()
            await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–º–µ–Ω—ã", reply_markup=markup)
        else:
            raise Exception()
    except:
        await bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ –≤–µ—Ä–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        


@dp.message_handler(state=Car.period)
async def handler(message, state: FSMContext):
    if message.text == "üåû–î–µ–Ω—å":

        async with state.proxy() as data:
            data['period'] = "–î–µ–Ω—å"

        await Car.first_distance.set()
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –Ω–∞ –Ω–∞—á–∞–ª–æ —Å–º–µ–Ω—ã")
        
    elif message.text == "üåö–ù–æ—á—å":
        
        async with state.proxy() as data:
            data['period'] = "–ù–æ—á—å"
        
        await Car.first_distance.set()
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –Ω–∞ –Ω–∞—á–∞–ª–æ —Å–º–µ–Ω—ã")
    else:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ")


@dp.message_handler(state=Car.first_distance)
async def handler(message, state: FSMContext):
    try: 
        num = int(message.text)
        
        async with state.proxy() as data:
            data['first_distance'] = num
        
        await Car.last_distance.set()
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –Ω–∞ –∫–æ–Ω–µ—Ü —Å–º–µ–Ω—ã")
    except:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥")
    

@dp.message_handler(state=Car.last_distance)
async def handler(message, state: FSMContext):
    try: 
        num = int(message.text)
        
        async with state.proxy() as data:
            first_dis = data['first_distance']
            data['last_distance'] = num

        text = f"""–í–∞—à –ø—Ä–æ–±–µ–≥: {num - first_dis}.–í–≤–µ–¥–∏—Ç–µ Z-–æ—Ç—á–µ—Ç"""
        await Car.z_report.set()
        await bot.send_message(message.chat.id, text)
    except:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥")


@dp.message_handler(state=Car.z_report)
async def handler(message, state: FSMContext):
    

    try:
        z_index = float(message.text)
        
        async with state.proxy() as data:
            data['z_index'] = z_index

        async with state.proxy() as data:
            data['cash_bavaria'] = 0        

        await Car.only_cash.set()
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ª–∏—á–Ω—ã–µ –±–∞–≤–∞—Ä–∏–∏")
    except:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥") 
        

@dp.message_handler(state=Car.only_cash)
async def handler(message, state: FSMContext):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    stop_item = types.KeyboardButton(text="–°—Ç–æ–ø")
    markup.add(stop_item)

    try:
        if message.text != '–°—Ç–æ–ø':
             cash = float(message.text)

             async with state.proxy() as data:
                data['cash_bavaria']  =  round(data['cash_bavaria']+cash, 2)
                result = data['cash_bavaria']

             await bot.send_message(message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}", reply_markup=markup)
        else:
            async with state.proxy() as data:
                data['terminal'] = 0

            await Car.terminal.set()
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞")
    except:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥") 


@dp.message_handler(state=Car.terminal)
async def handler(message, state: FSMContext):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    stop_item = types.KeyboardButton(text="–°—Ç–æ–ø")
    markup.add(stop_item)


    try:
        if message.text != "–°—Ç–æ–ø":
            terminal = float(message.text)
            
            async with state.proxy() as data:
                data['terminal'] = round(data['terminal']+terminal, 2)
                result = data['terminal'] 

            await bot.send_message(message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}", reply_markup=markup)
        else:

            async with state.proxy() as data:
                data['viza_discount'] = 0

            await Car.viza_discount.set()
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ visa —Å–∫–∏–¥–∫–∞")
    except:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥") 


@dp.message_handler(state=Car.viza_discount)
async def handler(message, state: FSMContext):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    stop_item = types.KeyboardButton(text="–°—Ç–æ–ø")
    markup.add(stop_item)

    try: 
        if message.text != "–°—Ç–æ–ø":
            num = float(message.text)

            async with state.proxy() as data:
                data['viza_discount'] = round(data['viza_discount']+num, 2)
                result = data['viza_discount']

            await bot.send_message(message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}", reply_markup=markup)
        else:
            async with state.proxy() as data:
                data['cash_card'] = 0
            await Car.cash_card.set()
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç –ø–æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–µ")

        
    except:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞.–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")


@dp.message_handler(state=Car.cash_card)
async def handler(message, state: FSMContext):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    stop_item = types.KeyboardButton(text='–°—Ç–æ–ø')
    markup.add(stop_item)
    try:
        if message.text != "–°—Ç–æ–ø":
            num = float(message.text)
            
            async with state.proxy() as data:
                data['cash_card'] = round(data['cash_card']+num, 2)
                result = data['cash_card']
            
            await bot.send_message(message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç {result}", reply_markup=markup)
                
        else:

            async with state.proxy() as data:
                data['znf'] = 0
            await Car.znf.set()
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ó–ù–§")
    
    
    except:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–æ–¥") 


@dp.message_handler(state=Car.znf)
async def handler(message, state: FSMContext):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    stop_item = types.KeyboardButton(text='–°—Ç–æ–ø')
    markup.add(stop_item)

    try:
        if message.text != "–°—Ç–æ–ø":
            num = float(message.text)

            async with state.proxy() as data:
                data['znf'] = round(data['znf']+num, 2)
                result = data['znf']

            await bot.send_message(message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç {result}", reply_markup=markup)    
         
        else:
            
            async with state.proxy() as data:
                data['perscash'] = 0

            
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –õ–∏—á–Ω–æ–º—É —Å—á–µ—Ç—É")
            await Car.perscash.set()
    except:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥") 


@dp.message_handler(state=Car.perscash)
async def handler(message, state:FSMContext):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    stop_item = types.KeyboardButton(text='–°—Ç–æ–ø')
    markup.add(stop_item)
    try:
        if message.text !="–°—Ç–æ–ø":
            num = float(message.text)

            async with state.proxy() as data:
                data['perscash'] = round(data['perscash']+num, 2)
                result = data['perscash']

            await bot.send_message(message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç {result}", reply_markup=markup) 

        else:

            async with state.proxy() as data:
                data['bonuse'] = 0
            await Car.bonuse.set()
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –±–æ–Ω—É—Å–∞–º")
    except:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥")


@dp.message_handler(state=Car.bonuse)
async def handler(message, state: FSMContext):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    stop_item = types.KeyboardButton(text='–°—Ç–æ–ø')
    markup.add(stop_item)

    try:
        if message.text != "–°—Ç–æ–ø":
            num = float(message.text)
        
            async with state.proxy() as data:
                data['bonuse'] = round(data['bonuse']+num, 2)
                result = data['bonuse']

            await bot.send_message(message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç {result}", reply_markup=markup)

        else:

            await Car.yandex_nal.set()
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞—Å—á–µ—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏ –Ø–Ω–¥–µ–∫—Å", reply_markup=types.ReplyKeyboardRemove())
    except:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥") 


@dp.message_handler(state=Car.yandex_nal)
async def handler(message, state: FSMContext):
    try:
        yandex_nal = float(message.text)
        
        async with state.proxy() as data:
            data['yandex_nal'] = yandex_nal

        await Car.yandex_bez.set()
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞—Å—á–µ—Ç—É –∫–∞—Ä—Ç–æ–π –≤ –Ø–Ω–¥–µ–∫—Å")
    except:
        await bot .send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥") 


@dp.message_handler(state=Car.yandex_bez)
async def handler(message, state: FSMContext):
    try:
        yandex_bez = float(message.text)

        async with state.proxy() as data:
            data['yandex_bez'] = yandex_bez

        await Car.washing.set()
        await bot.send_message(message.chat.id, "–°—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–π–∫–∏, –µ—Å–ª–∏ –Ω–µ –º—ã–ª–∏ –∞–≤—Ç–æ –≤–ø–∏—à–∏—Ç–µ 0")
    except:
        
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
                

@dp.message_handler(state=Car.washing)
async def handler(message, state: FSMContext):
    markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    washing_nal = types.KeyboardButton(text="–ù–∞–ª–∏—á–Ω—ã–µüíµ")
    washing_bez = types.KeyboardButton(text="–ë–µ–∑–Ω–∞–ªüí≥")
    markup1.add(washing_nal, washing_bez)
    try:
        washing = float(message.text)

        async with state.proxy() as data:
            data['washing'] = washing

        await Car.type_pay_washing.set()   
        await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –º–æ–π–∫–∏", reply_markup=markup1)
    except Exception as e:
        print(f"error: {e}")
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä")


@dp.message_handler(state=Car.type_pay_washing)
async def handler(message, state: FSMContext):
    try:
        if message.text == '–ù–∞–ª–∏—á–Ω—ã–µüíµ':

            async with state.proxy() as data:
                data['washing_type'] = '–ù–∞–ª–∏—á–Ω—ã–µ'

            await Car.azs.set()
        elif message.text == '–ë–µ–∑–Ω–∞–ªüí≥':

            async with state.proxy() as data:
                data['washing_type'] = '–ë–µ–∑–Ω–∞–ª'

            await Car.azs.set()
        else:
            raise Exception
        
        await bot.send_message(message.chat.id, "–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–∞–≤–∫–∏, –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—Ä–∞–≤–ª—è–ª–∏ –∞–≤—Ç–æ –≤–ø–∏—à–∏—Ç–µ 0")
    except:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")



@dp.message_handler(state=Car.azs)
async def handler(message, state: FSMContext): 
    markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    azs_nal = types.KeyboardButton(text="–ù–∞–ª–∏—á–Ω—ã–µüíµ")
    azs_bez = types.KeyboardButton(text="–ë–µ–∑–Ω–∞–ªüí≥")
    markup1.add(azs_nal, azs_bez)
    try:
        azs = float(message.text)

        async with state.proxy() as data:
            data['azs'] = azs

        await Car.type_pay_azs.set()
        await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∑–∞–ø—Ä–∞–≤–∫–∏", reply_markup=markup1)
    except:
        print(f"error: {azs}")
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥")
        

@dp.message_handler(state=Car.type_pay_azs)
async def handler(message, state: FSMContext):
    try:
        if message.text == '–ù–∞–ª–∏—á–Ω—ã–µüíµ' or message.text == '–ë–µ–∑–Ω–∞–ªüí≥':

            if message.text == '–ù–∞–ª–∏—á–Ω—ã–µüíµ':

                async with state.proxy() as data:
                    data['azs_type'] = '–ù–∞–ª–∏—á–Ω—ã–µ'
                await Car.water.set()
            elif message.text == '–ë–µ–∑–Ω–∞–ªüí≥':

                async with state.proxy() as data:
                    data['azs_type'] = '–ë–µ–∑–Ω–∞–ª'
                await Car.water.set()
            else:
                raise Exception
            
            await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã')
    except:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä")
          

@dp.message_handler(state=Car.water)
async def handler(message, state):
    try:
        count = int(message.text)

        async with state.proxy() as data:
                data['water'] = count

        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–∞–¥–æ–∫ —è–Ω–¥–µ–∫—Å')
        await Car.count_yandex.set()
    except:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥")


@dp.message_handler(state=Car.count_yandex)
async def handler(message, state):
    try:
        count = int(message.text)

        async with state.proxy() as data:
                data['count_yandex'] = count

        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–∞–¥–æ–∫ –±–∞–≤–∞—Ä–∏–∏')
        await Car.count_bavaria.set()
    except:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥")


@dp.message_handler(state=Car.count_bavaria)
async def handler(message, state):
    try:
        count = int(message.text)

        async with state.proxy() as data:
                data['count_bavaria'] = count

        await bot.send_message(message.chat.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–∞–Ω–Ω–æ–π –Ω–∞–ª–∏—á–∫–∏')
        await Car.over_cash.set()
    except:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥")


@dp.message_handler(state=Car.over_cash)
async def handler(message, state):
    try:
        count = float(message.text)

        async with state.proxy() as data:
                data['over_cash'] = count

                cdata = deepcopy(data._data)
        

        f = open ('names.json', "r")
        data = json.loads(f.read())
        f.close()

        tb = Table(GOOGLE_CREDENTIALS_FILE,  data.get("id"))
        
        if not tb.is_have_list(cdata['sheet_name']):
            tb.create_sheets(cdata['sheet_name'])
            tb.create_struct_for_sheet()

        tb.ss.setSheetByName(cdata['sheet_name'])
        tb.add_items(cdata)  
        
        tb.run()
        report = await get_report(state)
        
        await bot.send_message(message.chat.id, text=report)

    except:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")


if __name__ == '__main__':
    try:
        executor.start_polling(dp)
    except Exception as e:
        with open('errors.txt', 'a') as f: # check in db if username exist
            f.write(e)

 